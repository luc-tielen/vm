* Bytecode Interpreter Project
** Overview
I'm currently working on a stack-based bytecode interpreter for a statically typed functional language in C.
I hope to work on this long enough to get to implementing closures, garbage collection, exceptions and concurrency.
I'll be taking cues from OCaml and Chicken Scheme, along with other resources, combined with some experimentation.
I don't exactly know what I'm doing, but I have a rough idea. So please be patient with me!
** Tasks
*** Done
**** DONE Decide on bytecode scheme
 - load int, add, push, pop, print, halt
**** DONE Add demo programs
 | Program                         | Expected result |
 |---------------------------------+-----------------|
 | 1 print halt;                   | print 1         |
 | 1 2 add 3 4 add add print halt; | print 10        |
**** DONE Implement interpreter for demo programs
 Should have a stack, stack pointer, instruction pointer

 - Start with: just load int, print and halt
 - Later add: push, pop, add
**** DONE Write tests for the above in Haskell
 Need to actually test print output
**** DONE Refactor bytecode from int to bytes + int to long
**** DONE Refactor vm to struct
**** DONE 63-bit ints
 An integer will be represented by marking the least significant bit with 1.

 Later, we'll add pointers and will represent them by marking the least
 significant bit with 0.

 This is so that the garbage collector will know if it needs to chase a pointer
 or not.
**** DONE Add heap allocated strings + print_str
**** DONE Refactor stack/heap objects
 Stack objects should be a union of long / unsigned char pointer.
 Heap objects should be a struct which has a size, is marked boolean, data.
**** DONE Add Automatic Memory Management for Heap Allocated Objects
 - Add nursery (gen0) and gen1 heaps
 - Each allocation is added to the nursery
 - When the nursery is full, collect garbage
 - Go over the stack and mark reachable objects, move reachable objects to gen1
   and free the non-reachable objects
**** DONE Setup valgrind
**** DONE Reorganize files - types, interpreter, gc
**** DONE Add gen1 garbage collector
**** DONE Revise tagging scheme
 Currently we only have heap allocated strings, but if we want
 to have lists, we need to be able to distinguish pointers and non pointers
 (for garbage collection purposes).

 We will change the way we represent items on the heap by using 2 bytes
 to represent: size, is_marked, is_bytearray.

 - 14 bits - size
 - 1 bit - is_bytearray
 - 1 bit - is_marked

 when is_bytearray is true, we count number of elements instead of bytes.
 The real size should be ~size * sizeof(StackObject)~.

 So when we have a bytearray, non of the data fields are pointers.
 When we don't, we will represent each data field the same way we do
 on the stack.

 Each field can be either an integer literal or a pointer,
 and we distinguish between the two using the least significant bit:

 - 1 means integer, which we will shift right once to get the real number
 - 0 means pointer, which we will use as-is
**** DONE GC pointer chasing
**** DONE Replace unsigned char with uint8_t
*** Current
**** DONE Pairs/Lists - we need this to test the pointer chasing in the GC
 - ListNil will be represented as the int literal 0
 - ListCons will be represented as a two stack objects:
   1. the first is the value
   2. the second is the rest of the list

 - New opcode: Cons <size> will create a new heap object and will load
   the last <size> elements on the stack
 - New opcode: Index <index> will put the <index> element in the
   heap object on the stack
**** DONE General design doc
**** NOW Add Functions and Closures
- [ ] We need to change the way we represent heap object and add an additional type: closure.
- [ ] We need to add a few new instructions, ~CALL~, ~JMP~, ~RET~, ~CLOS~, ~APPLY~, ~UNWRAP~.
- [ ] We need to add functions and an entry point, a program is a list of functions instead.
*** Next
**** TODO Add tests for Cons and Indexing
 We can represent lists, arrays and complex objects. Let's write some tests.
**** TODO Add tests for pointer chasing in GC
**** TODO Add Jumps and Conditional Jumps
**** TODO Writes some comments and documentation
 Go over the code, find non-obvious things, move things around, write comments.
**** TODO Add QuickCheck Tests
**** TODO Standard library functions
 - int-to-str, concat, change print to only print strings
** References
- [[http://caml.inria.fr/pub/papers/xleroy-zinc.pdf][Zinc]]
- [[http://git.annexia.org/?p=jonesforth.git;a=blob;f=jonesforth.S;h=45e6e854a5d2a4c3f26af264dfce56379d401425;hb=HEAD][JonesForth]]
- [[http://www.more-magic.net/posts/internals-data-representation.html][Chicken data representation]]
- [[http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/][Baby's first garbage collector]]
- [[https://eli.thegreenplace.net/2012/07/12/computed-goto-for-efficient-dispatch-tables/][Computed Gotos]]
- [[http://borkware.com/hacks/CRefresher.pdf][A C Refresher]]
- [[https://en.cppreference.com/w/c][C Reference]]
** Tools
- [[https://soupi.github.io/insect/][binsect]]
